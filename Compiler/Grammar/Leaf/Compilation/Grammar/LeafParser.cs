//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/max/RiderProjects/Leaf/Compiler/Grammar/Leaf.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Leaf.Compilation.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class LeafParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, WS=21, Escape=22, Comment=23, MultiLineComment=24, 
		Def=25, Ref=26, Var=27, Let=28, Pub=29, Free=30, Static=31, TypeOf=32, 
		SizeOf=33, Return=34, Struct=35, Operator=36, Allocator=37, StaticAccessor=38, 
		DynamicAccessor=39, In=40, Out=41, Add=42, Sub=43, Mul=44, Div=45, Mod=46, 
		As=47, Eq=48, Neq=49, If=50, For=51, Else=52, While=53, Range=54, Group=55, 
		True=56, False=57, Integer=58, FloatingPoint=59, Char=60, String=61, CString=62, 
		Id=63;
	public const int
		RULE_namespace = 0, RULE_operator_id = 1, RULE_type = 2, RULE_type_member = 3, 
		RULE_struct = 4, RULE_attribute = 5, RULE_attribute_add = 6, RULE_allocator = 7, 
		RULE_def_type = 8, RULE_def_func = 9, RULE_def_operator = 10, RULE_def = 11, 
		RULE_parameter_def = 12, RULE_function_decl = 13, RULE_function_impl = 14, 
		RULE_function_call = 15, RULE_function_scope = 16, RULE_integer = 17, 
		RULE_floating_point = 18, RULE_value = 19, RULE_initialization_list = 20, 
		RULE_scope = 21, RULE_conditional_scope = 22, RULE_var_def_t = 23, RULE_var_def_v = 24, 
		RULE_var_ass = 25, RULE_var_def = 26, RULE_if = 27, RULE_while = 28, RULE_for = 29, 
		RULE_return = 30, RULE_free = 31, RULE_statement = 32, RULE_generic_def_list = 33, 
		RULE_generic_impl_list = 34, RULE_ns_import = 35, RULE_entry_point = 36;
	public static readonly string[] ruleNames = {
		"namespace", "operator_id", "type", "type_member", "struct", "attribute", 
		"attribute_add", "allocator", "def_type", "def_func", "def_operator", 
		"def", "parameter_def", "function_decl", "function_impl", "function_call", 
		"function_scope", "integer", "floating_point", "value", "initialization_list", 
		"scope", "conditional_scope", "var_def_t", "var_def_v", "var_ass", "var_def", 
		"if", "while", "for", "return", "free", "statement", "generic_def_list", 
		"generic_impl_list", "ns_import", "entry_point"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'->'", "':'", "'{'", "';'", "'}'", "'attribute'", 
		"'@'", "'mut'", "'=>'", "'&'", "'='", "'['", "']'", "'?'", "'<'", "'>'", 
		"'import'", null, null, null, null, "'def'", "'ref'", "'var'", "'let'", 
		"'pub'", "'free'", "'static'", "'typeof'", "'sizeof'", "'return'", "'struct'", 
		"'operator'", "'allocator'", "'::'", "'.'", "'in'", "'out'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'as'", "'=='", "'!='", "'if'", "'for'", "'else'", 
		"'while'", "'..'", "'...'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "WS", "Escape", 
		"Comment", "MultiLineComment", "Def", "Ref", "Var", "Let", "Pub", "Free", 
		"Static", "TypeOf", "SizeOf", "Return", "Struct", "Operator", "Allocator", 
		"StaticAccessor", "DynamicAccessor", "In", "Out", "Add", "Sub", "Mul", 
		"Div", "Mod", "As", "Eq", "Neq", "If", "For", "Else", "While", "Range", 
		"Group", "True", "False", "Integer", "FloatingPoint", "Char", "String", 
		"CString", "Id"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Leaf.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LeafParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LeafParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LeafParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(LeafParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(LeafParser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DynamicAccessor() { return GetToken(LeafParser.DynamicAccessor, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 0, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(Id);
			State = 75;
			Match(DynamicAccessor);
			State = 76;
			Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(LeafParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(LeafParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sub() { return GetToken(LeafParser.Sub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mul() { return GetToken(LeafParser.Mul, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(LeafParser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(LeafParser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(LeafParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DynamicAccessor() { return GetToken(LeafParser.DynamicAccessor, 0); }
		public Operator_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_id; } }
	}

	[RuleVersion(0)]
	public Operator_idContext operator_id() {
		Operator_idContext _localctx = new Operator_idContext(Context, State);
		EnterRule(_localctx, 2, RULE_operator_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DynamicAccessor) | (1L << Add) | (1L << Sub) | (1L << Mul) | (1L << Div) | (1L << Mod) | (1L << As) | (1L << Id))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IToken ns;
		public IToken name;
		public TypeContext nested;
		public TypeContext tuple;
		public TypeContext ret;
		public IToken ptr;
		public IToken property;
		public IToken funcCall;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(LeafParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(LeafParser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DynamicAccessor() { return GetToken(LeafParser.DynamicAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_impl_listContext generic_impl_list() {
			return GetRuleContext<Generic_impl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ref() { return GetToken(LeafParser.Ref, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllocatorContext allocator() {
			return GetRuleContext<AllocatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeOf() { return GetToken(LeafParser.TypeOf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mul() { return GetToken(LeafParser.Mul, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StaticAccessor() { return GetToken(LeafParser.StaticAccessor, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 83;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 81;
					_localctx.ns = Match(Id);
					State = 82;
					Match(DynamicAccessor);
					}
					break;
				}
				State = 85;
				_localctx.name = Match(Id);
				State = 87;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 86;
					generic_impl_list();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 89;
				Match(Ref);
				State = 90;
				type(10);
				}
				break;
			case 3:
				{
				State = 91;
				Match(T__0);
				State = 92;
				_localctx.nested = type(0);
				State = 93;
				Match(T__1);
				}
				break;
			case 4:
				{
				State = 95;
				Match(T__0);
				State = 96;
				_localctx.tuple = type(0);
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 97;
					Match(T__2);
					State = 98;
					type(0);
					}
					}
					State = 103;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 104;
				Match(T__1);
				}
				break;
			case 5:
				{
				State = 106;
				Match(T__0);
				{
				State = 107;
				type(0);
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 108;
					Match(T__2);
					State = 109;
					type(0);
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 115;
				Match(T__1);
				State = 116;
				Match(T__3);
				State = 117;
				_localctx.ret = type(7);
				}
				break;
			case 6:
				{
				State = 119;
				@struct();
				}
				break;
			case 7:
				{
				State = 120;
				allocator();
				}
				break;
			case 8:
				{
				State = 121;
				attribute();
				}
				break;
			case 9:
				{
				State = 122;
				Match(TypeOf);
				State = 123;
				Match(T__0);
				State = 124;
				value(0);
				State = 125;
				Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 154;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 152;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 129;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 130;
						_localctx.ptr = Match(Mul);
						}
						break;
					case 2:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 131;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 132;
						Match(StaticAccessor);
						State = 133;
						_localctx.property = Match(Id);
						}
						break;
					case 3:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 134;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 135;
						Match(StaticAccessor);
						State = 136;
						_localctx.funcCall = Match(Id);
						State = 138;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__17) {
							{
							State = 137;
							generic_impl_list();
							}
						}

						State = 140;
						Match(T__0);
						State = 149;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__5) | (1L << T__8) | (1L << T__12) | (1L << Ref) | (1L << TypeOf) | (1L << SizeOf) | (1L << Struct) | (1L << Allocator) | (1L << Mul) | (1L << True) | (1L << False) | (1L << Integer) | (1L << FloatingPoint) | (1L << Char) | (1L << String) | (1L << CString) | (1L << Id))) != 0)) {
							{
							State = 141;
							value(0);
							State = 146;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==T__2) {
								{
								{
								State = 142;
								Match(T__2);
								State = 143;
								value(0);
								}
								}
								State = 148;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 151;
						Match(T__1);
						}
						break;
					}
					} 
				}
				State = 156;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Type_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(LeafParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pub() { return GetToken(LeafParser.Pub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(LeafParser.Static, 0); }
		public Type_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_member; } }
	}

	[RuleVersion(0)]
	public Type_memberContext type_member() {
		Type_memberContext _localctx = new Type_memberContext(Context, State);
		EnterRule(_localctx, 6, RULE_type_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Pub) {
				{
				State = 157;
				Match(Pub);
				}
			}

			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Static) {
				{
				State = 160;
				Match(Static);
				}
			}

			State = 163;
			Match(Id);
			State = 164;
			Match(T__4);
			State = 165;
			type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(LeafParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext[] type_member() {
			return GetRuleContexts<Type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext type_member(int i) {
			return GetRuleContext<Type_memberContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 8, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(Struct);
			State = 168;
			Match(T__5);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Pub) | (1L << Static) | (1L << Id))) != 0)) {
				{
				{
				State = 169;
				type_member();
				State = 170;
				Match(T__6);
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 177;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext[] type_member() {
			return GetRuleContexts<Type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext type_member(int i) {
			return GetRuleContext<Type_memberContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(T__8);
			State = 180;
			Match(T__5);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Pub) | (1L << Static) | (1L << Id))) != 0)) {
				{
				{
				State = 181;
				type_member();
				State = 182;
				Match(T__6);
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 189;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_addContext : ParserRuleContext {
		public IToken ns;
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(LeafParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(LeafParser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DynamicAccessor() { return GetToken(LeafParser.DynamicAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_impl_listContext generic_impl_list() {
			return GetRuleContext<Generic_impl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public Attribute_addContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_add; } }
	}

	[RuleVersion(0)]
	public Attribute_addContext attribute_add() {
		Attribute_addContext _localctx = new Attribute_addContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute_add);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__9);
			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 192;
				_localctx.ns = Match(Id);
				State = 193;
				Match(DynamicAccessor);
				}
				break;
			}
			State = 196;
			_localctx.name = Match(Id);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 197;
				generic_impl_list();
				}
			}

			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 200;
				Match(T__0);
				State = 201;
				value(0);
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 202;
					Match(T__2);
					State = 203;
					value(0);
					}
					}
					State = 208;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 209;
				Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Allocator() { return GetToken(LeafParser.Allocator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext[] type_member() {
			return GetRuleContexts<Type_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_memberContext type_member(int i) {
			return GetRuleContext<Type_memberContext>(i);
		}
		public AllocatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocator; } }
	}

	[RuleVersion(0)]
	public AllocatorContext allocator() {
		AllocatorContext _localctx = new AllocatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_allocator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(Allocator);
			State = 214;
			Match(T__5);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Pub) | (1L << Static) | (1L << Id))) != 0)) {
				{
				{
				State = 215;
				type_member();
				State = 216;
				Match(T__6);
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 223;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Def() { return GetToken(LeafParser.Def, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(LeafParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_def_listContext generic_def_list() {
			return GetRuleContext<Generic_def_listContext>(0);
		}
		public Def_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_type; } }
	}

	[RuleVersion(0)]
	public Def_typeContext def_type() {
		Def_typeContext _localctx = new Def_typeContext(Context, State);
		EnterRule(_localctx, 16, RULE_def_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(Def);
			State = 226;
			Match(Id);
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 227;
				generic_def_list();
				}
			}

			State = 230;
			Match(T__4);
			{
			State = 231;
			@struct();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_funcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Def() { return GetToken(LeafParser.Def, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(LeafParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_declContext function_decl() {
			return GetRuleContext<Function_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_implContext function_impl() {
			return GetRuleContext<Function_implContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_def_listContext generic_def_list() {
			return GetRuleContext<Generic_def_listContext>(0);
		}
		public Def_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_func; } }
	}

	[RuleVersion(0)]
	public Def_funcContext def_func() {
		Def_funcContext _localctx = new Def_funcContext(Context, State);
		EnterRule(_localctx, 18, RULE_def_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(Def);
			State = 234;
			Match(Id);
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 235;
				generic_def_list();
				}
			}

			State = 238;
			Match(T__4);
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 239;
				function_decl();
				}
				break;
			case 2:
				{
				State = 240;
				function_impl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Def() { return GetToken(LeafParser.Def, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(LeafParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_idContext operator_id() {
			return GetRuleContext<Operator_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_implContext function_impl() {
			return GetRuleContext<Function_implContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_def_listContext generic_def_list() {
			return GetRuleContext<Generic_def_listContext>(0);
		}
		public Def_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_operator; } }
	}

	[RuleVersion(0)]
	public Def_operatorContext def_operator() {
		Def_operatorContext _localctx = new Def_operatorContext(Context, State);
		EnterRule(_localctx, 20, RULE_def_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(Def);
			State = 244;
			Match(Operator);
			State = 245;
			operator_id();
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 246;
				generic_def_list();
				}
			}

			State = 249;
			Match(T__4);
			State = 250;
			function_impl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Def_typeContext def_type() {
			return GetRuleContext<Def_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Def_funcContext def_func() {
			return GetRuleContext<Def_funcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Def_operatorContext def_operator() {
			return GetRuleContext<Def_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_addContext[] attribute_add() {
			return GetRuleContexts<Attribute_addContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_addContext attribute_add(int i) {
			return GetRuleContext<Attribute_addContext>(i);
		}
		public DefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def; } }
	}

	[RuleVersion(0)]
	public DefContext def() {
		DefContext _localctx = new DefContext(Context, State);
		EnterRule(_localctx, 22, RULE_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 252;
				attribute_add();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 258;
				def_type();
				}
				break;
			case 2:
				{
				State = 259;
				def_func();
				}
				break;
			case 3:
				{
				State = 260;
				def_operator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_defContext : ParserRuleContext {
		public IToken mut;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(LeafParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Parameter_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_def; } }
	}

	[RuleVersion(0)]
	public Parameter_defContext parameter_def() {
		Parameter_defContext _localctx = new Parameter_defContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameter_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(Id);
			State = 264;
			Match(T__4);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 265;
				_localctx.mut = Match(T__10);
				}
			}

			State = 268;
			type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_defContext[] parameter_def() {
			return GetRuleContexts<Parameter_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_defContext parameter_def(int i) {
			return GetRuleContext<Parameter_defContext>(i);
		}
		public Function_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_decl; } }
	}

	[RuleVersion(0)]
	public Function_declContext function_decl() {
		Function_declContext _localctx = new Function_declContext(Context, State);
		EnterRule(_localctx, 26, RULE_function_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(T__0);
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Id) {
				{
				State = 271;
				parameter_def();
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 272;
					Match(T__2);
					State = 273;
					parameter_def();
					}
					}
					State = 278;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 281;
			Match(T__1);
			State = 282;
			Match(T__3);
			State = 283;
			type(0);
			State = 284;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_implContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_scopeContext function_scope() {
			return GetRuleContext<Function_scopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_defContext[] parameter_def() {
			return GetRuleContexts<Parameter_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_defContext parameter_def(int i) {
			return GetRuleContext<Parameter_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Function_implContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_impl; } }
	}

	[RuleVersion(0)]
	public Function_implContext function_impl() {
		Function_implContext _localctx = new Function_implContext(Context, State);
		EnterRule(_localctx, 28, RULE_function_impl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(T__0);
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Id) {
				{
				State = 287;
				parameter_def();
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 288;
					Match(T__2);
					State = 289;
					parameter_def();
					}
					}
					State = 294;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 297;
			Match(T__1);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 298;
				Match(T__3);
				State = 299;
				type(0);
				}
			}

			State = 302;
			function_scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 30, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			value(0);
			State = 305;
			Match(T__0);
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__5) | (1L << T__8) | (1L << T__12) | (1L << Ref) | (1L << TypeOf) | (1L << SizeOf) | (1L << Struct) | (1L << Allocator) | (1L << Mul) | (1L << True) | (1L << False) | (1L << Integer) | (1L << FloatingPoint) | (1L << Char) | (1L << String) | (1L << CString) | (1L << Id))) != 0)) {
				{
				State = 306;
				value(0);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 307;
					Match(T__2);
					State = 308;
					value(0);
					}
					}
					State = 313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 316;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_scopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Function_scopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_scope; } }
	}

	[RuleVersion(0)]
	public Function_scopeContext function_scope() {
		Function_scopeContext _localctx = new Function_scopeContext(Context, State);
		EnterRule(_localctx, 32, RULE_function_scope);
		int _la;
		try {
			State = 330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318;
				Match(T__11);
				State = 319;
				value(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320;
				Match(T__11);
				State = 321;
				statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 322;
				Match(T__5);
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__5) | (1L << T__8) | (1L << T__12) | (1L << Ref) | (1L << Var) | (1L << Let) | (1L << Free) | (1L << TypeOf) | (1L << SizeOf) | (1L << Return) | (1L << Struct) | (1L << Allocator) | (1L << Mul) | (1L << If) | (1L << For) | (1L << While) | (1L << True) | (1L << False) | (1L << Integer) | (1L << FloatingPoint) | (1L << Char) | (1L << String) | (1L << CString) | (1L << Id))) != 0)) {
					{
					{
					State = 323;
					statement();
					}
					}
					State = 328;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 329;
				Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(LeafParser.Integer, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 34, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(Integer);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_pointContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingPoint() { return GetToken(LeafParser.FloatingPoint, 0); }
		public Floating_pointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point; } }
	}

	[RuleVersion(0)]
	public Floating_pointContext floating_point() {
		Floating_pointContext _localctx = new Floating_pointContext(Context, State);
		EnterRule(_localctx, 36, RULE_floating_point);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(FloatingPoint);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext call;
		public ValueContext par;
		public IToken addrOf;
		public IToken deref;
		public IToken property;
		public IToken funcCall;
		public IToken nested;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(LeafParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_impl_listContext generic_impl_list() {
			return GetRuleContext<Generic_impl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(LeafParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(LeafParser.False, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Floating_pointContext floating_point() {
			return GetRuleContext<Floating_pointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(LeafParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(LeafParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CString() { return GetToken(LeafParser.CString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mul() { return GetToken(LeafParser.Mul, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ref() { return GetToken(LeafParser.Ref, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Initialization_listContext initialization_list() {
			return GetRuleContext<Initialization_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SizeOf() { return GetToken(LeafParser.SizeOf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StaticAccessor() { return GetToken(LeafParser.StaticAccessor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(LeafParser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(LeafParser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(LeafParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sub() { return GetToken(LeafParser.Sub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(LeafParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Neq() { return GetToken(LeafParser.Neq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Range() { return GetToken(LeafParser.Range, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DynamicAccessor() { return GetToken(LeafParser.DynamicAccessor, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	}

	[RuleVersion(0)]
	public ValueContext value() {
		return value(0);
	}

	private ValueContext value(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ValueContext _localctx = new ValueContext(Context, _parentState);
		ValueContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_value, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 337;
				Match(Id);
				State = 339;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 338;
					generic_impl_list();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 341;
				Match(T__0);
				State = 342;
				_localctx.par = value(0);
				State = 343;
				Match(T__1);
				}
				break;
			case 3:
				{
				State = 345;
				Match(True);
				}
				break;
			case 4:
				{
				State = 346;
				Match(False);
				}
				break;
			case 5:
				{
				State = 347;
				integer();
				}
				break;
			case 6:
				{
				State = 348;
				floating_point();
				}
				break;
			case 7:
				{
				State = 349;
				Match(Char);
				}
				break;
			case 8:
				{
				State = 350;
				Match(String);
				}
				break;
			case 9:
				{
				State = 351;
				Match(CString);
				}
				break;
			case 10:
				{
				State = 352;
				_localctx.addrOf = Match(T__12);
				State = 353;
				value(8);
				}
				break;
			case 11:
				{
				State = 354;
				_localctx.deref = Match(Mul);
				State = 355;
				value(7);
				}
				break;
			case 12:
				{
				State = 356;
				Match(Ref);
				State = 357;
				value(6);
				}
				break;
			case 13:
				{
				State = 358;
				initialization_list();
				}
				break;
			case 14:
				{
				State = 359;
				Match(SizeOf);
				State = 360;
				Match(T__0);
				State = 361;
				type(0);
				State = 362;
				Match(T__1);
				}
				break;
			case 15:
				{
				State = 364;
				type(0);
				State = 365;
				Match(StaticAccessor);
				State = 366;
				_localctx.property = Match(Id);
				}
				break;
			case 16:
				{
				State = 368;
				type(0);
				State = 369;
				Match(StaticAccessor);
				State = 370;
				_localctx.funcCall = Match(Id);
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 371;
					generic_impl_list();
					}
				}

				State = 374;
				Match(T__0);
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__5) | (1L << T__8) | (1L << T__12) | (1L << Ref) | (1L << TypeOf) | (1L << SizeOf) | (1L << Struct) | (1L << Allocator) | (1L << Mul) | (1L << True) | (1L << False) | (1L << Integer) | (1L << FloatingPoint) | (1L << Char) | (1L << String) | (1L << CString) | (1L << Id))) != 0)) {
					{
					State = 375;
					value(0);
					State = 380;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__2) {
						{
						{
						State = 376;
						Match(T__2);
						State = 377;
						value(0);
						}
						}
						State = 382;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 385;
				Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 419;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 417;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
					case 1:
						{
						_localctx = new ValueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_value);
						State = 389;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 390;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Mul) | (1L << Div) | (1L << Mod))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 391;
						value(12);
						}
						break;
					case 2:
						{
						_localctx = new ValueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_value);
						State = 392;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 393;
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Sub) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 394;
						value(11);
						}
						break;
					case 3:
						{
						_localctx = new ValueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_value);
						State = 395;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 396;
						_la = TokenStream.LA(1);
						if ( !(_la==Eq || _la==Neq) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 397;
						value(10);
						}
						break;
					case 4:
						{
						_localctx = new ValueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_value);
						State = 398;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 399;
						Match(Range);
						State = 400;
						value(5);
						}
						break;
					case 5:
						{
						_localctx = new ValueContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_value);
						State = 401;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						{
						State = 402;
						_localctx.nested = Match(DynamicAccessor);
						State = 403;
						value(0);
						}
						}
						break;
					case 6:
						{
						_localctx = new ValueContext(_parentctx, _parentState);
						_localctx.call = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_value);
						State = 404;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 405;
						Match(T__0);
						State = 414;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__5) | (1L << T__8) | (1L << T__12) | (1L << Ref) | (1L << TypeOf) | (1L << SizeOf) | (1L << Struct) | (1L << Allocator) | (1L << Mul) | (1L << True) | (1L << False) | (1L << Integer) | (1L << FloatingPoint) | (1L << Char) | (1L << String) | (1L << CString) | (1L << Id))) != 0)) {
							{
							State = 406;
							value(0);
							State = 411;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==T__2) {
								{
								{
								State = 407;
								Match(T__2);
								State = 408;
								value(0);
								}
								}
								State = 413;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 416;
						Match(T__1);
						}
						break;
					}
					} 
				}
				State = 421;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Initialization_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(LeafParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(LeafParser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public Initialization_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialization_list; } }
	}

	[RuleVersion(0)]
	public Initialization_listContext initialization_list() {
		Initialization_listContext _localctx = new Initialization_listContext(Context, State);
		EnterRule(_localctx, 40, RULE_initialization_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__8) | (1L << Ref) | (1L << TypeOf) | (1L << Struct) | (1L << Allocator) | (1L << Id))) != 0)) {
				{
				State = 422;
				type(0);
				}
			}

			State = 425;
			Match(T__5);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Id) {
				{
				State = 426;
				Match(Id);
				State = 427;
				Match(T__13);
				State = 428;
				value(0);
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 429;
					Match(T__2);
					State = 430;
					Match(Id);
					State = 431;
					Match(T__13);
					State = 432;
					value(0);
					}
					}
					State = 437;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 440;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 42, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(T__5);
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__5) | (1L << T__8) | (1L << T__12) | (1L << Ref) | (1L << Var) | (1L << Let) | (1L << Free) | (1L << TypeOf) | (1L << SizeOf) | (1L << Return) | (1L << Struct) | (1L << Allocator) | (1L << Mul) | (1L << If) | (1L << For) | (1L << While) | (1L << True) | (1L << False) | (1L << Integer) | (1L << FloatingPoint) | (1L << Char) | (1L << String) | (1L << CString) | (1L << Id))) != 0)) {
				{
				{
				State = 443;
				statement();
				}
				}
				State = 448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 449;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_scopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Conditional_scopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_scope; } }
	}

	[RuleVersion(0)]
	public Conditional_scopeContext conditional_scope() {
		Conditional_scopeContext _localctx = new Conditional_scopeContext(Context, State);
		EnterRule(_localctx, 44, RULE_conditional_scope);
		int _la;
		try {
			State = 461;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 451;
				Match(T__11);
				State = 452;
				statement();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 453;
				Match(T__5);
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__5) | (1L << T__8) | (1L << T__12) | (1L << Ref) | (1L << Var) | (1L << Let) | (1L << Free) | (1L << TypeOf) | (1L << SizeOf) | (1L << Return) | (1L << Struct) | (1L << Allocator) | (1L << Mul) | (1L << If) | (1L << For) | (1L << While) | (1L << True) | (1L << False) | (1L << Integer) | (1L << FloatingPoint) | (1L << Char) | (1L << String) | (1L << CString) | (1L << Id))) != 0)) {
					{
					{
					State = 454;
					statement();
					}
					}
					State = 459;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 460;
				Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_def_tContext : ParserRuleContext {
		public TypeContext t;
		public TypeContext alloc;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(LeafParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(LeafParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public Var_def_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_def_t; } }
	}

	[RuleVersion(0)]
	public Var_def_tContext var_def_t() {
		Var_def_tContext _localctx = new Var_def_tContext(Context, State);
		EnterRule(_localctx, 46, RULE_var_def_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(Var);
			State = 464;
			Match(Id);
			State = 465;
			Match(T__4);
			State = 466;
			_localctx.t = type(0);
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 467;
				Match(T__4);
				State = 468;
				_localctx.alloc = type(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_def_vContext : ParserRuleContext {
		public TypeContext t;
		public TypeContext alloc;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(LeafParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(LeafParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(LeafParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ref() { return GetToken(LeafParser.Ref, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public Var_def_vContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_def_v; } }
	}

	[RuleVersion(0)]
	public Var_def_vContext var_def_v() {
		Var_def_vContext _localctx = new Var_def_vContext(Context, State);
		EnterRule(_localctx, 48, RULE_var_def_v);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			_la = TokenStream.LA(1);
			if ( !(_la==Var || _la==Let) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ref) {
				{
				State = 472;
				Match(Ref);
				}
			}

			State = 475;
			Match(Id);
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 476;
				Match(T__4);
				State = 477;
				_localctx.t = type(0);
				}
			}

			State = 480;
			Match(T__13);
			State = 481;
			value(0);
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 482;
				Match(T__4);
				State = 483;
				_localctx.alloc = type(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_assContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public Var_assContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_ass; } }
	}

	[RuleVersion(0)]
	public Var_assContext var_ass() {
		Var_assContext _localctx = new Var_assContext(Context, State);
		EnterRule(_localctx, 50, RULE_var_ass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			value(0);
			State = 487;
			Match(T__13);
			State = 488;
			value(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_def_vContext var_def_v() {
			return GetRuleContext<Var_def_vContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_def_tContext var_def_t() {
			return GetRuleContext<Var_def_tContext>(0);
		}
		public Var_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_def; } }
	}

	[RuleVersion(0)]
	public Var_defContext var_def() {
		Var_defContext _localctx = new Var_defContext(Context, State);
		EnterRule(_localctx, 52, RULE_var_def);
		try {
			State = 492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 490;
				var_def_v();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 491;
				var_def_t();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(LeafParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_scopeContext[] conditional_scope() {
			return GetRuleContexts<Conditional_scopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_scopeContext conditional_scope(int i) {
			return GetRuleContext<Conditional_scopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_defContext var_def() {
			return GetRuleContext<Var_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(LeafParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 54, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(If);
			State = 497;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__5:
			case T__8:
			case T__12:
			case Ref:
			case TypeOf:
			case SizeOf:
			case Struct:
			case Allocator:
			case Mul:
			case True:
			case False:
			case Integer:
			case FloatingPoint:
			case Char:
			case String:
			case CString:
			case Id:
				{
				State = 495;
				value(0);
				}
				break;
			case Var:
			case Let:
				{
				State = 496;
				var_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 499;
			conditional_scope();
			State = 505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 500;
				Match(Else);
				State = 503;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case If:
					{
					State = 501;
					@if();
					}
					break;
				case T__5:
				case T__11:
					{
					State = 502;
					conditional_scope();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(LeafParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_scopeContext conditional_scope() {
			return GetRuleContext<Conditional_scopeContext>(0);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 56, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(While);
			State = 508;
			value(0);
			State = 509;
			conditional_scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		public IToken name;
		public IToken index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(LeafParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(LeafParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_scopeContext conditional_scope() {
			return GetRuleContext<Conditional_scopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(LeafParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(LeafParser.Id, i);
		}
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 58, RULE_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(For);
			State = 518;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				{
				{
				State = 512;
				Match(T__14);
				State = 513;
				_localctx.name = Match(Id);
				State = 514;
				Match(T__2);
				State = 515;
				_localctx.index = Match(Id);
				State = 516;
				Match(T__15);
				}
				}
				break;
			case Id:
				{
				State = 517;
				_localctx.name = Match(Id);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 520;
			Match(In);
			State = 521;
			value(0);
			State = 522;
			conditional_scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		public IToken cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(LeafParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 60, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			Match(Return);
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__5) | (1L << T__8) | (1L << T__12) | (1L << T__16) | (1L << Ref) | (1L << TypeOf) | (1L << SizeOf) | (1L << Struct) | (1L << Allocator) | (1L << Mul) | (1L << True) | (1L << False) | (1L << Integer) | (1L << FloatingPoint) | (1L << Char) | (1L << String) | (1L << CString) | (1L << Id))) != 0)) {
				{
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__16) {
					{
					State = 525;
					_localctx.cond = Match(T__16);
					}
				}

				State = 528;
				value(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Free() { return GetToken(LeafParser.Free, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public FreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_free; } }
	}

	[RuleVersion(0)]
	public FreeContext free() {
		FreeContext _localctx = new FreeContext(Context, State);
		EnterRule(_localctx, 62, RULE_free);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(Free);
			State = 532;
			value(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_defContext var_def() {
			return GetRuleContext<Var_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_assContext var_ass() {
			return GetRuleContext<Var_assContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeContext free() {
			return GetRuleContext<FreeContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_statement);
		try {
			State = 552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 536;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Var:
				case Let:
					{
					State = 534;
					var_def();
					}
					break;
				case T__0:
				case T__5:
				case T__8:
				case T__12:
				case Ref:
				case TypeOf:
				case SizeOf:
				case Struct:
				case Allocator:
				case Mul:
				case True:
				case False:
				case Integer:
				case FloatingPoint:
				case Char:
				case String:
				case CString:
				case Id:
					{
					State = 535;
					var_ass();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 538;
				Match(T__6);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 540;
				function_call();
				State = 541;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 543;
				@if();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 544;
				@while();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 545;
				@for();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 546;
				@return();
				State = 547;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 549;
				free();
				State = 550;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(LeafParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(LeafParser.Id, i);
		}
		public Generic_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_def_list; } }
	}

	[RuleVersion(0)]
	public Generic_def_listContext generic_def_list() {
		Generic_def_listContext _localctx = new Generic_def_listContext(Context, State);
		EnterRule(_localctx, 66, RULE_generic_def_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(T__17);
			State = 555;
			Match(Id);
			State = 560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 556;
				Match(T__2);
				State = 557;
				Match(Id);
				}
				}
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 563;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_impl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public Generic_impl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_impl_list; } }
	}

	[RuleVersion(0)]
	public Generic_impl_listContext generic_impl_list() {
		Generic_impl_listContext _localctx = new Generic_impl_listContext(Context, State);
		EnterRule(_localctx, 68, RULE_generic_impl_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(T__17);
			State = 566;
			type(0);
			State = 571;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 567;
				Match(T__2);
				State = 568;
				type(0);
				}
				}
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 574;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ns_importContext : ParserRuleContext {
		public IToken alias;
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(LeafParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(LeafParser.Id, 0); }
		public Ns_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ns_import; } }
	}

	[RuleVersion(0)]
	public Ns_importContext ns_import() {
		Ns_importContext _localctx = new Ns_importContext(Context, State);
		EnterRule(_localctx, 70, RULE_ns_import);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			Match(T__19);
			State = 577;
			@namespace();
			{
			State = 578;
			Match(As);
			State = 579;
			_localctx.alias = Match(Id);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entry_pointContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ns_importContext[] ns_import() {
			return GetRuleContexts<Ns_importContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ns_importContext ns_import(int i) {
			return GetRuleContext<Ns_importContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefContext[] def() {
			return GetRuleContexts<DefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefContext def(int i) {
			return GetRuleContext<DefContext>(i);
		}
		public Entry_pointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry_point; } }
	}

	[RuleVersion(0)]
	public Entry_pointContext entry_point() {
		Entry_pointContext _localctx = new Entry_pointContext(Context, State);
		EnterRule(_localctx, 72, RULE_entry_point);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__19) {
				{
				{
				State = 581;
				ns_import();
				}
				}
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9 || _la==Def) {
				{
				{
				State = 587;
				def();
				}
				}
				State = 592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return type_sempred((TypeContext)_localctx, predIndex);
		case 19: return value_sempred((ValueContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool value_sempred(ValueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 21);
		case 8: return Precpred(Context, 19);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x41', '\x254', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', 'V', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'Z', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', '\x66', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'i', 
		'\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', 'q', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', 't', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x82', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x8D', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '\x93', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'\x96', '\v', '\x4', '\x5', '\x4', '\x98', '\n', '\x4', '\x3', '\x4', 
		'\a', '\x4', '\x9B', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x9E', '\v', 
		'\x4', '\x3', '\x5', '\x5', '\x5', '\xA1', '\n', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\xA4', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', '\xAF', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '\xB2', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\xBB', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\xBE', '\v', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xC5', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xC9', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xCF', '\n', 
		'\b', '\f', '\b', '\xE', '\b', '\xD2', '\v', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\xD6', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xDD', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\xE0', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xE7', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\xEF', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\xF4', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\xFA', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\a', '\r', '\x100', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\x103', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x108', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x10D', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x115', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x118', '\v', '\xF', '\x5', '\xF', 
		'\x11A', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\a', '\x10', '\x125', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 
		'\x128', '\v', '\x10', '\x5', '\x10', '\x12A', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x12F', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\a', '\x11', '\x138', '\n', '\x11', '\f', '\x11', 
		'\xE', '\x11', '\x13B', '\v', '\x11', '\x5', '\x11', '\x13D', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x147', '\n', 
		'\x12', '\f', '\x12', '\xE', '\x12', '\x14A', '\v', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x14D', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x156', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x177', '\n', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', 
		'\x15', '\x17D', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x180', '\v', 
		'\x15', '\x5', '\x15', '\x182', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x186', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x19C', '\n', '\x15', 
		'\f', '\x15', '\xE', '\x15', '\x19F', '\v', '\x15', '\x5', '\x15', '\x1A1', 
		'\n', '\x15', '\x3', '\x15', '\a', '\x15', '\x1A4', '\n', '\x15', '\f', 
		'\x15', '\xE', '\x15', '\x1A7', '\v', '\x15', '\x3', '\x16', '\x5', '\x16', 
		'\x1AA', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', 
		'\x16', '\x1B4', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x1B7', '\v', 
		'\x16', '\x5', '\x16', '\x1B9', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x1BF', '\n', '\x17', '\f', 
		'\x17', '\xE', '\x17', '\x1C2', '\v', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', 
		'\x1CA', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x1CD', '\v', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x1D0', '\n', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x1D8', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\x1DC', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x1E1', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x1E7', '\n', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', 
		'\x1C', '\x1EF', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x1F4', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x1FA', '\n', '\x1D', '\x5', '\x1D', 
		'\x1FC', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x209', '\n', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', 
		'\x3', ' ', '\x5', ' ', '\x211', '\n', ' ', '\x3', ' ', '\x5', ' ', '\x214', 
		'\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x21B', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x22B', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\a', '#', '\x231', '\n', '#', '\f', '#', '\xE', '#', '\x234', 
		'\v', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\a', '$', '\x23C', '\n', '$', '\f', '$', '\xE', '$', '\x23F', 
		'\v', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '&', '\a', '&', '\x249', '\n', '&', '\f', 
		'&', '\xE', '&', '\x24C', '\v', '&', '\x3', '&', '\a', '&', '\x24F', '\n', 
		'&', '\f', '&', '\xE', '&', '\x252', '\v', '&', '\x3', '&', '\x2', '\x4', 
		'\x6', '(', '\'', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', '\x2', '\a', '\x5', '\x2', 
		')', ')', ',', '\x31', '\x41', '\x41', '\x3', '\x2', '.', '\x30', '\x3', 
		'\x2', ',', '-', '\x3', '\x2', '\x32', '\x33', '\x3', '\x2', '\x1D', '\x1E', 
		'\x2', '\x292', '\x2', 'L', '\x3', '\x2', '\x2', '\x2', '\x4', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x81', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\n', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xE', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\x14', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x18', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x109', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x120', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x132', '\x3', '\x2', '\x2', '\x2', '\"', '\x14C', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x14E', '\x3', '\x2', '\x2', '\x2', '&', '\x150', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x1A9', '\x3', '\x2', '\x2', '\x2', ',', '\x1BC', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x30', '\x1D1', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x1D9', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x36', '\x1EE', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x1F0', '\x3', '\x2', '\x2', '\x2', ':', '\x1FD', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x20E', '\x3', '\x2', '\x2', '\x2', '@', '\x215', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x44', '\x22C', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x242', '\x3', '\x2', '\x2', '\x2', 'J', '\x24A', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'M', '\a', '\x41', '\x2', '\x2', 'M', 'N', '\a', ')', 
		'\x2', '\x2', 'N', 'O', '\a', '\x41', '\x2', '\x2', 'O', '\x3', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'Q', '\t', '\x2', '\x2', '\x2', 'Q', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'R', 'U', '\b', '\x4', '\x1', '\x2', 'S', 
		'T', '\a', '\x41', '\x2', '\x2', 'T', 'V', '\a', ')', '\x2', '\x2', 'U', 
		'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 
		'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'Y', '\a', '\x41', '\x2', '\x2', 
		'X', 'Z', '\x5', '\x46', '$', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\a', '\x1C', '\x2', '\x2', '\\', '\x82', '\x5', '\x6', 
		'\x4', '\f', ']', '^', '\a', '\x3', '\x2', '\x2', '^', '_', '\x5', '\x6', 
		'\x4', '\x2', '_', '`', '\a', '\x4', '\x2', '\x2', '`', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\a', '\x3', '\x2', '\x2', '\x62', 
		'g', '\x5', '\x6', '\x4', '\x2', '\x63', '\x64', '\a', '\x5', '\x2', '\x2', 
		'\x64', '\x66', '\x5', '\x6', '\x4', '\x2', '\x65', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', 
		'\x4', '\x2', '\x2', 'k', '\x82', '\x3', '\x2', '\x2', '\x2', 'l', 'm', 
		'\a', '\x3', '\x2', '\x2', 'm', 'r', '\x5', '\x6', '\x4', '\x2', 'n', 
		'o', '\a', '\x5', '\x2', '\x2', 'o', 'q', '\x5', '\x6', '\x4', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 
		'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', 'u', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\a', '\x4', '\x2', '\x2', 'v', 'w', '\a', '\x6', '\x2', '\x2', 
		'w', 'x', '\x5', '\x6', '\x4', '\t', 'x', '\x82', '\x3', '\x2', '\x2', 
		'\x2', 'y', '\x82', '\x5', '\n', '\x6', '\x2', 'z', '\x82', '\x5', '\x10', 
		'\t', '\x2', '{', '\x82', '\x5', '\f', '\a', '\x2', '|', '}', '\a', '\"', 
		'\x2', '\x2', '}', '~', '\a', '\x3', '\x2', '\x2', '~', '\x7F', '\x5', 
		'(', '\x15', '\x2', '\x7F', '\x80', '\a', '\x4', '\x2', '\x2', '\x80', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x81', 'R', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '[', '\x3', '\x2', '\x2', '\x2', '\x81', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x61', '\x3', '\x2', '\x2', '\x2', '\x81', 'l', 
		'\x3', '\x2', '\x2', '\x2', '\x81', 'y', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x81', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '|', '\x3', '\x2', '\x2', '\x2', '\x82', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x84', '\f', '\r', '\x2', '\x2', '\x84', '\x9B', 
		'\a', '.', '\x2', '\x2', '\x85', '\x86', '\f', '\x4', '\x2', '\x2', '\x86', 
		'\x87', '\a', '(', '\x2', '\x2', '\x87', '\x9B', '\a', '\x41', '\x2', 
		'\x2', '\x88', '\x89', '\f', '\x3', '\x2', '\x2', '\x89', '\x8A', '\a', 
		'(', '\x2', '\x2', '\x8A', '\x8C', '\a', '\x41', '\x2', '\x2', '\x8B', 
		'\x8D', '\x5', '\x46', '$', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x97', '\a', '\x3', '\x2', '\x2', '\x8F', 
		'\x94', '\x5', '(', '\x15', '\x2', '\x90', '\x91', '\a', '\x5', '\x2', 
		'\x2', '\x91', '\x93', '\x5', '(', '\x15', '\x2', '\x92', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x96', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x98', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9B', '\a', '\x4', '\x2', '\x2', '\x9A', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x85', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\a', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA1', '\a', '\x1F', '\x2', 
		'\x2', '\xA0', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA4', '\a', '!', '\x2', '\x2', '\xA3', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', '\x41', '\x2', '\x2', '\xA6', 
		'\xA7', '\a', '\a', '\x2', '\x2', '\xA7', '\xA8', '\x5', '\x6', '\x4', 
		'\x2', '\xA8', '\t', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', 
		'%', '\x2', '\x2', '\xAA', '\xB0', '\a', '\b', '\x2', '\x2', '\xAB', '\xAC', 
		'\x5', '\b', '\x5', '\x2', '\xAC', '\xAD', '\a', '\t', '\x2', '\x2', '\xAD', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB4', '\a', '\n', '\x2', '\x2', '\xB4', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB6', '\a', '\v', '\x2', '\x2', '\xB6', 
		'\xBC', '\a', '\b', '\x2', '\x2', '\xB7', '\xB8', '\x5', '\b', '\x5', 
		'\x2', '\xB8', '\xB9', '\a', '\t', '\x2', '\x2', '\xB9', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\a', '\n', '\x2', '\x2', '\xC0', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xC4', '\a', '\f', '\x2', '\x2', '\xC2', '\xC3', '\a', '\x41', 
		'\x2', '\x2', '\xC3', '\xC5', '\a', ')', '\x2', '\x2', '\xC4', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC8', '\a', '\x41', 
		'\x2', '\x2', '\xC7', '\xC9', '\x5', '\x46', '$', '\x2', '\xC8', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\a', '\x3', 
		'\x2', '\x2', '\xCB', '\xD0', '\x5', '(', '\x15', '\x2', '\xCC', '\xCD', 
		'\a', '\x5', '\x2', '\x2', '\xCD', '\xCF', '\x5', '(', '\x15', '\x2', 
		'\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', '\x4', 
		'\x2', '\x2', '\xD4', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\xF', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\a', '\'', 
		'\x2', '\x2', '\xD8', '\xDE', '\a', '\b', '\x2', '\x2', '\xD9', '\xDA', 
		'\x5', '\b', '\x5', '\x2', '\xDA', '\xDB', '\a', '\t', '\x2', '\x2', '\xDB', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE2', '\a', '\n', '\x2', '\x2', '\xE2', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE4', '\a', '\x1B', '\x2', '\x2', '\xE4', 
		'\xE6', '\a', '\x41', '\x2', '\x2', '\xE5', '\xE7', '\x5', '\x44', '#', 
		'\x2', '\xE6', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\a', '\a', '\x2', '\x2', '\xE9', '\xEA', '\x5', '\n', '\x6', 
		'\x2', '\xEA', '\x13', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\a', 
		'\x1B', '\x2', '\x2', '\xEC', '\xEE', '\a', '\x41', '\x2', '\x2', '\xED', 
		'\xEF', '\x5', '\x44', '#', '\x2', '\xEE', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF3', '\a', '\a', '\x2', '\x2', '\xF1', 
		'\xF4', '\x5', '\x1C', '\xF', '\x2', '\xF2', '\xF4', '\x5', '\x1E', '\x10', 
		'\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\x15', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF6', '\a', '\x1B', '\x2', '\x2', '\xF6', '\xF7', '\a', '&', '\x2', 
		'\x2', '\xF7', '\xF9', '\x5', '\x4', '\x3', '\x2', '\xF8', '\xFA', '\x5', 
		'\x44', '#', '\x2', '\xF9', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xFC', '\a', '\a', '\x2', '\x2', '\xFC', '\xFD', '\x5', 
		'\x1E', '\x10', '\x2', '\xFD', '\x17', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\x100', '\x5', '\xE', '\b', '\x2', '\xFF', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\x103', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x107', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x108', '\x5', '\x12', '\n', '\x2', '\x105', 
		'\x108', '\x5', '\x14', '\v', '\x2', '\x106', '\x108', '\x5', '\x16', 
		'\f', '\x2', '\x107', '\x104', '\x3', '\x2', '\x2', '\x2', '\x107', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x19', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', '\x41', 
		'\x2', '\x2', '\x10A', '\x10C', '\a', '\a', '\x2', '\x2', '\x10B', '\x10D', 
		'\a', '\r', '\x2', '\x2', '\x10C', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x10F', '\x5', '\x6', '\x4', '\x2', '\x10F', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x110', '\x119', '\a', '\x3', '\x2', 
		'\x2', '\x111', '\x116', '\x5', '\x1A', '\xE', '\x2', '\x112', '\x113', 
		'\a', '\x5', '\x2', '\x2', '\x113', '\x115', '\x5', '\x1A', '\xE', '\x2', 
		'\x114', '\x112', '\x3', '\x2', '\x2', '\x2', '\x115', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x114', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x117', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', '\x119', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\a', 
		'\x4', '\x2', '\x2', '\x11C', '\x11D', '\a', '\x6', '\x2', '\x2', '\x11D', 
		'\x11E', '\x5', '\x6', '\x4', '\x2', '\x11E', '\x11F', '\a', '\t', '\x2', 
		'\x2', '\x11F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x120', '\x129', 
		'\a', '\x3', '\x2', '\x2', '\x121', '\x126', '\x5', '\x1A', '\xE', '\x2', 
		'\x122', '\x123', '\a', '\x5', '\x2', '\x2', '\x123', '\x125', '\x5', 
		'\x1A', '\xE', '\x2', '\x124', '\x122', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x126', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x121', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x12E', '\a', '\x4', '\x2', '\x2', '\x12C', '\x12D', '\a', '\x6', '\x2', 
		'\x2', '\x12D', '\x12F', '\x5', '\x6', '\x4', '\x2', '\x12E', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x130', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x5', 
		'\"', '\x12', '\x2', '\x131', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x133', '\x5', '(', '\x15', '\x2', '\x133', '\x13C', '\a', '\x3', '\x2', 
		'\x2', '\x134', '\x139', '\x5', '(', '\x15', '\x2', '\x135', '\x136', 
		'\a', '\x5', '\x2', '\x2', '\x136', '\x138', '\x5', '(', '\x15', '\x2', 
		'\x137', '\x135', '\x3', '\x2', '\x2', '\x2', '\x138', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x137', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\a', 
		'\x4', '\x2', '\x2', '\x13F', '!', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\a', '\xE', '\x2', '\x2', '\x141', '\x14D', '\x5', '(', '\x15', 
		'\x2', '\x142', '\x143', '\a', '\xE', '\x2', '\x2', '\x143', '\x14D', 
		'\x5', '\x42', '\"', '\x2', '\x144', '\x148', '\a', '\b', '\x2', '\x2', 
		'\x145', '\x147', '\x5', '\x42', '\"', '\x2', '\x146', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', '\x2', '\x2', 
		'\x2', '\x149', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x14B', '\x14D', '\a', '\n', '\x2', '\x2', 
		'\x14C', '\x140', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x144', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\a', '<', '\x2', '\x2', 
		'\x14F', '%', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\a', '=', 
		'\x2', '\x2', '\x151', '\'', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', 
		'\b', '\x15', '\x1', '\x2', '\x153', '\x155', '\a', '\x41', '\x2', '\x2', 
		'\x154', '\x156', '\x5', '\x46', '$', '\x2', '\x155', '\x154', '\x3', 
		'\x2', '\x2', '\x2', '\x155', '\x156', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\a', '\x3', '\x2', 
		'\x2', '\x158', '\x159', '\x5', '(', '\x15', '\x2', '\x159', '\x15A', 
		'\a', '\x4', '\x2', '\x2', '\x15A', '\x186', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x186', '\a', ':', '\x2', '\x2', '\x15C', '\x186', '\a', ';', 
		'\x2', '\x2', '\x15D', '\x186', '\x5', '$', '\x13', '\x2', '\x15E', '\x186', 
		'\x5', '&', '\x14', '\x2', '\x15F', '\x186', '\a', '>', '\x2', '\x2', 
		'\x160', '\x186', '\a', '?', '\x2', '\x2', '\x161', '\x186', '\a', '@', 
		'\x2', '\x2', '\x162', '\x163', '\a', '\xF', '\x2', '\x2', '\x163', '\x186', 
		'\x5', '(', '\x15', '\n', '\x164', '\x165', '\a', '.', '\x2', '\x2', '\x165', 
		'\x186', '\x5', '(', '\x15', '\t', '\x166', '\x167', '\a', '\x1C', '\x2', 
		'\x2', '\x167', '\x186', '\x5', '(', '\x15', '\b', '\x168', '\x186', '\x5', 
		'*', '\x16', '\x2', '\x169', '\x16A', '\a', '#', '\x2', '\x2', '\x16A', 
		'\x16B', '\a', '\x3', '\x2', '\x2', '\x16B', '\x16C', '\x5', '\x6', '\x4', 
		'\x2', '\x16C', '\x16D', '\a', '\x4', '\x2', '\x2', '\x16D', '\x186', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', '\x5', '\x6', '\x4', '\x2', 
		'\x16F', '\x170', '\a', '(', '\x2', '\x2', '\x170', '\x171', '\a', '\x41', 
		'\x2', '\x2', '\x171', '\x186', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', 
		'\x5', '\x6', '\x4', '\x2', '\x173', '\x174', '\a', '(', '\x2', '\x2', 
		'\x174', '\x176', '\a', '\x41', '\x2', '\x2', '\x175', '\x177', '\x5', 
		'\x46', '$', '\x2', '\x176', '\x175', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x178', '\x181', '\a', '\x3', '\x2', '\x2', '\x179', '\x17E', 
		'\x5', '(', '\x15', '\x2', '\x17A', '\x17B', '\a', '\x5', '\x2', '\x2', 
		'\x17B', '\x17D', '\x5', '(', '\x15', '\x2', '\x17C', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x180', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\x3', '\x2', '\x2', 
		'\x2', '\x17F', '\x182', '\x3', '\x2', '\x2', '\x2', '\x180', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x181', '\x182', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x184', '\a', '\x4', '\x2', '\x2', '\x184', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x185', '\x152', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x157', '\x3', '\x2', '\x2', '\x2', '\x185', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x15C', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x185', '\x15E', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x185', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x185', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x162', '\x3', '\x2', '\x2', '\x2', '\x185', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x168', '\x3', '\x2', '\x2', '\x2', '\x185', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x185', 
		'\x172', '\x3', '\x2', '\x2', '\x2', '\x186', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x187', '\x188', '\f', '\r', '\x2', '\x2', '\x188', '\x189', '\t', 
		'\x3', '\x2', '\x2', '\x189', '\x1A4', '\x5', '(', '\x15', '\xE', '\x18A', 
		'\x18B', '\f', '\f', '\x2', '\x2', '\x18B', '\x18C', '\t', '\x4', '\x2', 
		'\x2', '\x18C', '\x1A4', '\x5', '(', '\x15', '\r', '\x18D', '\x18E', '\f', 
		'\v', '\x2', '\x2', '\x18E', '\x18F', '\t', '\x5', '\x2', '\x2', '\x18F', 
		'\x1A4', '\x5', '(', '\x15', '\f', '\x190', '\x191', '\f', '\x6', '\x2', 
		'\x2', '\x191', '\x192', '\a', '\x38', '\x2', '\x2', '\x192', '\x1A4', 
		'\x5', '(', '\x15', '\a', '\x193', '\x194', '\f', '\x17', '\x2', '\x2', 
		'\x194', '\x195', '\a', ')', '\x2', '\x2', '\x195', '\x1A4', '\x5', '(', 
		'\x15', '\x2', '\x196', '\x197', '\f', '\x15', '\x2', '\x2', '\x197', 
		'\x1A0', '\a', '\x3', '\x2', '\x2', '\x198', '\x19D', '\x5', '(', '\x15', 
		'\x2', '\x199', '\x19A', '\a', '\x5', '\x2', '\x2', '\x19A', '\x19C', 
		'\x5', '(', '\x15', '\x2', '\x19B', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x19C', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19B', '\x3', 
		'\x2', '\x2', '\x2', '\x19D', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19E', 
		'\x1A1', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x1A0', '\x198', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\x1A4', '\a', '\x4', '\x2', '\x2', '\x1A3', '\x187', '\x3', 
		'\x2', '\x2', '\x2', '\x1A3', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x1A3', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x190', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x193', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x196', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', ')', '\x3', '\x2', '\x2', '\x2', '\x1A7', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1AA', '\x5', '\x6', '\x4', 
		'\x2', '\x1A9', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'\x1AB', '\x1B8', '\a', '\b', '\x2', '\x2', '\x1AC', '\x1AD', '\a', '\x41', 
		'\x2', '\x2', '\x1AD', '\x1AE', '\a', '\x10', '\x2', '\x2', '\x1AE', '\x1B5', 
		'\x5', '(', '\x15', '\x2', '\x1AF', '\x1B0', '\a', '\x5', '\x2', '\x2', 
		'\x1B0', '\x1B1', '\a', '\x41', '\x2', '\x2', '\x1B1', '\x1B2', '\a', 
		'\x10', '\x2', '\x2', '\x1B2', '\x1B4', '\x5', '(', '\x15', '\x2', '\x1B3', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B7', '\x3', '\x2', '\x2', 
		'\x2', '\x1B5', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', 
		'\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x1B7', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1AC', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\a', '\n', '\x2', 
		'\x2', '\x1BB', '+', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1C0', '\a', 
		'\b', '\x2', '\x2', '\x1BD', '\x1BF', '\x5', '\x42', '\"', '\x2', '\x1BE', 
		'\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C2', '\x3', '\x2', '\x2', 
		'\x2', '\x1C0', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', 
		'\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C3', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', '\a', 
		'\n', '\x2', '\x2', '\x1C4', '-', '\x3', '\x2', '\x2', '\x2', '\x1C5', 
		'\x1C6', '\a', '\xE', '\x2', '\x2', '\x1C6', '\x1D0', '\x5', '\x42', '\"', 
		'\x2', '\x1C7', '\x1CB', '\a', '\b', '\x2', '\x2', '\x1C8', '\x1CA', '\x5', 
		'\x42', '\"', '\x2', '\x1C9', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1C9', '\x3', '\x2', '\x2', 
		'\x2', '\x1CB', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CE', 
		'\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1CE', '\x1D0', '\a', '\n', '\x2', '\x2', '\x1CF', '\x1C5', '\x3', '\x2', 
		'\x2', '\x2', '\x1CF', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1D0', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', '\a', '\x1D', '\x2', '\x2', 
		'\x1D2', '\x1D3', '\a', '\x41', '\x2', '\x2', '\x1D3', '\x1D4', '\a', 
		'\a', '\x2', '\x2', '\x1D4', '\x1D7', '\x5', '\x6', '\x4', '\x2', '\x1D5', 
		'\x1D6', '\a', '\a', '\x2', '\x2', '\x1D6', '\x1D8', '\x5', '\x6', '\x4', 
		'\x2', '\x1D7', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', 
		'\x3', '\x2', '\x2', '\x2', '\x1D8', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x1D9', '\x1DB', '\t', '\x6', '\x2', '\x2', '\x1DA', '\x1DC', '\a', '\x1C', 
		'\x2', '\x2', '\x1DB', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', 
		'\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', '\x3', '\x2', '\x2', '\x2', 
		'\x1DD', '\x1E0', '\a', '\x41', '\x2', '\x2', '\x1DE', '\x1DF', '\a', 
		'\a', '\x2', '\x2', '\x1DF', '\x1E1', '\x5', '\x6', '\x4', '\x2', '\x1E0', 
		'\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\x3', '\x2', '\x2', 
		'\x2', '\x1E1', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', 
		'\a', '\x10', '\x2', '\x2', '\x1E3', '\x1E6', '\x5', '(', '\x15', '\x2', 
		'\x1E4', '\x1E5', '\a', '\a', '\x2', '\x2', '\x1E5', '\x1E7', '\x5', '\x6', 
		'\x4', '\x2', '\x1E6', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', 
		'\x3', '\x2', '\x2', '\x2', '\x1E7', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x1E8', '\x1E9', '\x5', '(', '\x15', '\x2', '\x1E9', '\x1EA', '\a', '\x10', 
		'\x2', '\x2', '\x1EA', '\x1EB', '\x5', '(', '\x15', '\x2', '\x1EB', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1EF', '\x5', '\x32', '\x1A', '\x2', 
		'\x1ED', '\x1EF', '\x5', '\x30', '\x19', '\x2', '\x1EE', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x1EE', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1EF', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F3', '\a', '\x34', '\x2', 
		'\x2', '\x1F1', '\x1F4', '\x5', '(', '\x15', '\x2', '\x1F2', '\x1F4', 
		'\x5', '\x36', '\x1C', '\x2', '\x1F3', '\x1F1', '\x3', '\x2', '\x2', '\x2', 
		'\x1F3', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\x3', 
		'\x2', '\x2', '\x2', '\x1F5', '\x1FB', '\x5', '.', '\x18', '\x2', '\x1F6', 
		'\x1F9', '\a', '\x36', '\x2', '\x2', '\x1F7', '\x1FA', '\x5', '\x38', 
		'\x1D', '\x2', '\x1F8', '\x1FA', '\x5', '.', '\x18', '\x2', '\x1F9', '\x1F7', 
		'\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1F8', '\x3', '\x2', '\x2', '\x2', 
		'\x1FA', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1F6', '\x3', 
		'\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FC', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\a', '\x37', '\x2', 
		'\x2', '\x1FE', '\x1FF', '\x5', '(', '\x15', '\x2', '\x1FF', '\x200', 
		'\x5', '.', '\x18', '\x2', '\x200', ';', '\x3', '\x2', '\x2', '\x2', '\x201', 
		'\x208', '\a', '\x35', '\x2', '\x2', '\x202', '\x203', '\a', '\x11', '\x2', 
		'\x2', '\x203', '\x204', '\a', '\x41', '\x2', '\x2', '\x204', '\x205', 
		'\a', '\x5', '\x2', '\x2', '\x205', '\x206', '\a', '\x41', '\x2', '\x2', 
		'\x206', '\x209', '\a', '\x12', '\x2', '\x2', '\x207', '\x209', '\a', 
		'\x41', '\x2', '\x2', '\x208', '\x202', '\x3', '\x2', '\x2', '\x2', '\x208', 
		'\x207', '\x3', '\x2', '\x2', '\x2', '\x209', '\x20A', '\x3', '\x2', '\x2', 
		'\x2', '\x20A', '\x20B', '\a', '*', '\x2', '\x2', '\x20B', '\x20C', '\x5', 
		'(', '\x15', '\x2', '\x20C', '\x20D', '\x5', '.', '\x18', '\x2', '\x20D', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x213', '\a', '$', '\x2', '\x2', 
		'\x20F', '\x211', '\a', '\x13', '\x2', '\x2', '\x210', '\x20F', '\x3', 
		'\x2', '\x2', '\x2', '\x210', '\x211', '\x3', '\x2', '\x2', '\x2', '\x211', 
		'\x212', '\x3', '\x2', '\x2', '\x2', '\x212', '\x214', '\x5', '(', '\x15', 
		'\x2', '\x213', '\x210', '\x3', '\x2', '\x2', '\x2', '\x213', '\x214', 
		'\x3', '\x2', '\x2', '\x2', '\x214', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x216', '\a', ' ', '\x2', '\x2', '\x216', '\x217', '\x5', '(', 
		'\x15', '\x2', '\x217', '\x41', '\x3', '\x2', '\x2', '\x2', '\x218', '\x21B', 
		'\x5', '\x36', '\x1C', '\x2', '\x219', '\x21B', '\x5', '\x34', '\x1B', 
		'\x2', '\x21A', '\x218', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x219', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x21C', '\x21D', '\a', '\t', '\x2', '\x2', '\x21D', '\x22B', '\x3', '\x2', 
		'\x2', '\x2', '\x21E', '\x21F', '\x5', ' ', '\x11', '\x2', '\x21F', '\x220', 
		'\a', '\t', '\x2', '\x2', '\x220', '\x22B', '\x3', '\x2', '\x2', '\x2', 
		'\x221', '\x22B', '\x5', '\x38', '\x1D', '\x2', '\x222', '\x22B', '\x5', 
		':', '\x1E', '\x2', '\x223', '\x22B', '\x5', '<', '\x1F', '\x2', '\x224', 
		'\x225', '\x5', '>', ' ', '\x2', '\x225', '\x226', '\a', '\t', '\x2', 
		'\x2', '\x226', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x227', '\x228', 
		'\x5', '@', '!', '\x2', '\x228', '\x229', '\a', '\t', '\x2', '\x2', '\x229', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x21A', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x22A', '\x222', '\x3', '\x2', '\x2', '\x2', 
		'\x22A', '\x223', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x224', '\x3', 
		'\x2', '\x2', '\x2', '\x22A', '\x227', '\x3', '\x2', '\x2', '\x2', '\x22B', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22D', '\a', '\x14', '\x2', 
		'\x2', '\x22D', '\x232', '\a', '\x41', '\x2', '\x2', '\x22E', '\x22F', 
		'\a', '\x5', '\x2', '\x2', '\x22F', '\x231', '\a', '\x41', '\x2', '\x2', 
		'\x230', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x231', '\x234', '\x3', 
		'\x2', '\x2', '\x2', '\x232', '\x230', '\x3', '\x2', '\x2', '\x2', '\x232', 
		'\x233', '\x3', '\x2', '\x2', '\x2', '\x233', '\x235', '\x3', '\x2', '\x2', 
		'\x2', '\x234', '\x232', '\x3', '\x2', '\x2', '\x2', '\x235', '\x236', 
		'\a', '\x15', '\x2', '\x2', '\x236', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x238', '\a', '\x14', '\x2', '\x2', '\x238', '\x23D', '\x5', 
		'\x6', '\x4', '\x2', '\x239', '\x23A', '\a', '\x5', '\x2', '\x2', '\x23A', 
		'\x23C', '\x5', '\x6', '\x4', '\x2', '\x23B', '\x239', '\x3', '\x2', '\x2', 
		'\x2', '\x23C', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23B', 
		'\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\x3', '\x2', '\x2', '\x2', 
		'\x23E', '\x240', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x23D', '\x3', 
		'\x2', '\x2', '\x2', '\x240', '\x241', '\a', '\x15', '\x2', '\x2', '\x241', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x242', '\x243', '\a', '\x16', '\x2', 
		'\x2', '\x243', '\x244', '\x5', '\x2', '\x2', '\x2', '\x244', '\x245', 
		'\a', '\x31', '\x2', '\x2', '\x245', '\x246', '\a', '\x41', '\x2', '\x2', 
		'\x246', 'I', '\x3', '\x2', '\x2', '\x2', '\x247', '\x249', '\x5', 'H', 
		'%', '\x2', '\x248', '\x247', '\x3', '\x2', '\x2', '\x2', '\x249', '\x24C', 
		'\x3', '\x2', '\x2', '\x2', '\x24A', '\x248', '\x3', '\x2', '\x2', '\x2', 
		'\x24A', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x250', '\x3', 
		'\x2', '\x2', '\x2', '\x24C', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24D', 
		'\x24F', '\x5', '\x18', '\r', '\x2', '\x24E', '\x24D', '\x3', '\x2', '\x2', 
		'\x2', '\x24F', '\x252', '\x3', '\x2', '\x2', '\x2', '\x250', '\x24E', 
		'\x3', '\x2', '\x2', '\x2', '\x250', '\x251', '\x3', '\x2', '\x2', '\x2', 
		'\x251', 'K', '\x3', '\x2', '\x2', '\x2', '\x252', '\x250', '\x3', '\x2', 
		'\x2', '\x2', '\x45', 'U', 'Y', 'g', 'r', '\x81', '\x8C', '\x94', '\x97', 
		'\x9A', '\x9C', '\xA0', '\xA3', '\xB0', '\xBC', '\xC4', '\xC8', '\xD0', 
		'\xD5', '\xDE', '\xE6', '\xEE', '\xF3', '\xF9', '\x101', '\x107', '\x10C', 
		'\x116', '\x119', '\x126', '\x129', '\x12E', '\x139', '\x13C', '\x148', 
		'\x14C', '\x155', '\x176', '\x17E', '\x181', '\x185', '\x19D', '\x1A0', 
		'\x1A3', '\x1A5', '\x1A9', '\x1B5', '\x1B8', '\x1C0', '\x1CB', '\x1CF', 
		'\x1D7', '\x1DB', '\x1E0', '\x1E6', '\x1EE', '\x1F3', '\x1F9', '\x1FB', 
		'\x208', '\x210', '\x213', '\x21A', '\x22A', '\x232', '\x23D', '\x24A', 
		'\x250',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Leaf.Compilation.Grammar
